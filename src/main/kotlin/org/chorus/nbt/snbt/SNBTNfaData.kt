/* Generated by: JavaCC 21 Parser Generator. SNBTNfaData.java */
package org.chorus.nbt.snbt

import org.chorus.nbt.snbt.SNBTConstants.LexicalState
import java.util.*

/**
 * Holder class for the data used by SNBTLexer
 * to do the NFA thang
 */
internal object SNBTNfaData : SNBTConstants {
    private var nfaFunctions: Array<NfaFunction>

    /**
     * @param lexicalState the lexical state
     * @return the table of function pointers that implement the lexical state
     */
    fun getFunctionTableMap(lexicalState: LexicalState?): Array<NfaFunction> {
        // We only have one lexical state in this case, so we return that!
        return nfaFunctions
    }

    // Initialize the various NFA method tables
    init {
        SNBT.NFA_FUNCTIONS_init()
    }

    // The functional interface that represents 
    // the acceptance method of an NFA state
    internal interface NfaFunction {
        fun apply(ch: Int, bs: BitSet?, validTypes: EnumSet<SNBTConstants.TokenType?>?): SNBTConstants.TokenType?
    }

    /**
     * Holder class for NFA code related to SNBT lexical state
     */
    private object SNBT {
        fun NFA_SNBT_0(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == '"'.code) {
                nextStates.set(12)
            } else if (ch == '\''.code) {
                nextStates.set(1)
            } else if (ch == '-'.code) {
                nextStates.set(21)
                nextStates.set(28)
                nextStates.set(19)
                nextStates.set(38)
                nextStates.set(31)
                nextStates.set(16)
            } else if (ch == '0'.code) {
                nextStates.set(33)
                nextStates.set(11)
                nextStates.set(26)
                nextStates.set(17)
                nextStates.set(32)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(37)
                nextStates.set(23)
                nextStates.set(3)
                nextStates.set(34)
                nextStates.set(10)
            } else if (ch == 'f'.code) {
                nextStates.set(20)
            } else if (ch == 't'.code) {
                nextStates.set(6)
            } else if (ch == 'I'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.I)) type = SNBTConstants.TokenType.I
            } else if (ch == ';'.code) {
                if (validTypes.contains(SNBTConstants.TokenType._TOKEN_17)) type = SNBTConstants.TokenType._TOKEN_17
            } else if (ch == 'B'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.B)) type = SNBTConstants.TokenType.B
            }
            if (ch == '0'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.INTEGER)) type = SNBTConstants.TokenType.INTEGER
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(5)
                if (validTypes.contains(SNBTConstants.TokenType.INTEGER)) type = SNBTConstants.TokenType.INTEGER
            } else if (ch == '}'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.CLOSE_BRACE)) type = SNBTConstants.TokenType.CLOSE_BRACE
            } else if (ch == '{'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.OPEN_BRACE)) type = SNBTConstants.TokenType.OPEN_BRACE
            } else if (ch == ']'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.CLOSE_BRACKET)) type =
                    SNBTConstants.TokenType.CLOSE_BRACKET
            } else if (ch == '['.code) {
                if (validTypes.contains(SNBTConstants.TokenType.OPEN_BRACKET)) type =
                    SNBTConstants.TokenType.OPEN_BRACKET
            } else if (ch == ','.code) {
                if (validTypes.contains(SNBTConstants.TokenType.COMMA)) type = SNBTConstants.TokenType.COMMA
            } else if (ch == ':'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.COLON)) type = SNBTConstants.TokenType.COLON
            } else if (ch == '\t'.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            } else if (ch == '\n'.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            } else if (ch == '\r'.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            } else if (ch == ' '.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            }
            return type
        }

        fun NFA_SNBT_1(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if ((ch >= 0x0 && ch <= '&'.code) || (ch >= '('.code)) {
                nextStates.set(1)
            }
            if (ch == '\\'.code) {
                nextStates.set(36)
            } else if (ch == '\''.code) {
                if (validTypes.contains(SNBTConstants.TokenType.STRING)) type = SNBTConstants.TokenType.STRING
            }
            return type
        }

        fun NFA_SNBT_2(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(39)
            }
            return type
        }

        fun NFA_SNBT_3(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(3)
            } else if (ch == 'L'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.LONG)) type = SNBTConstants.TokenType.LONG
            } else if (ch == 'l'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.LONG)) type = SNBTConstants.TokenType.LONG
            }
            return type
        }

        fun NFA_SNBT_4(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(29)
            }
            return type
        }

        fun NFA_SNBT_5(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(5)
                if (validTypes.contains(SNBTConstants.TokenType.INTEGER)) type = SNBTConstants.TokenType.INTEGER
            }
            return type
        }

        fun NFA_SNBT_6(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == 'r'.code) {
                nextStates.set(14)
            }
            return type
        }

        fun NFA_SNBT_7(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if ((ch == '+'.code) || (ch == '-'.code)) {
                nextStates.set(18)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(24)
            }
            return type
        }

        fun NFA_SNBT_8(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(27)
            }
            return type
        }

        fun NFA_SNBT_9(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == '\t'.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            } else if (ch == '\n'.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            } else if (ch == '\r'.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            } else if (ch == ' '.code) {
                nextStates.set(9)
                if (validTypes.contains(SNBTConstants.TokenType.WHITESPACE)) type = SNBTConstants.TokenType.WHITESPACE
            }
            return type
        }

        fun NFA_SNBT_10(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == '.'.code) {
                nextStates.set(8)
            } else if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(10)
            } else if ((ch == 'E'.code) || (ch == 'e'.code)) {
                nextStates.set(7)
            } else if (ch == 'D'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            } else if (ch == 'd'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            }
            return type
        }

        fun NFA_SNBT_11(
            ch: Int,
            nextStates: BitSet?,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == 'B'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.BYTE)) type = SNBTConstants.TokenType.BYTE
            } else if (ch == 'b'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.BYTE)) type = SNBTConstants.TokenType.BYTE
            }
            return type
        }

        fun NFA_SNBT_12(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if ((ch >= 0x0 && ch <= '!'.code) || (ch >= '#'.code)) {
                nextStates.set(12)
            }
            if (ch == '\\'.code) {
                nextStates.set(13)
            } else if (ch == '"'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.STRING)) type = SNBTConstants.TokenType.STRING
            }
            return type
        }

        fun NFA_SNBT_13(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == '"'.code) {
                nextStates.set(12)
            }
            return type
        }

        fun NFA_SNBT_14(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == 'u'.code) {
                nextStates.set(22)
            }
            return type
        }

        fun NFA_SNBT_15(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == 's'.code) {
                nextStates.set(35)
            }
            return type
        }

        fun NFA_SNBT_16(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == '0'.code) {
                nextStates.set(11)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(37)
            }
            return type
        }

        fun NFA_SNBT_17(
            ch: Int,
            nextStates: BitSet?,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == 'S'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.SHORT)) type = SNBTConstants.TokenType.SHORT
            } else if (ch == 's'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.SHORT)) type = SNBTConstants.TokenType.SHORT
            }
            return type
        }

        fun NFA_SNBT_18(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(24)
            }
            return type
        }

        fun NFA_SNBT_19(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == '0'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.INTEGER)) type = SNBTConstants.TokenType.INTEGER
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(5)
                if (validTypes.contains(SNBTConstants.TokenType.INTEGER)) type = SNBTConstants.TokenType.INTEGER
            }
            return type
        }

        fun NFA_SNBT_20(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == 'a'.code) {
                nextStates.set(25)
            }
            return type
        }

        fun NFA_SNBT_21(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == '0'.code) {
                nextStates.set(33)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(3)
            }
            return type
        }

        fun NFA_SNBT_22(
            ch: Int,
            nextStates: BitSet?,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == 'e'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.BOOLEAN)) type = SNBTConstants.TokenType.BOOLEAN
            }
            return type
        }

        fun NFA_SNBT_23(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(23)
            } else if (ch == 'S'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.SHORT)) type = SNBTConstants.TokenType.SHORT
            } else if (ch == 's'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.SHORT)) type = SNBTConstants.TokenType.SHORT
            }
            return type
        }

        fun NFA_SNBT_24(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(24)
            } else if (ch == 'D'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            } else if (ch == 'd'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            }
            return type
        }

        fun NFA_SNBT_25(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == 'l'.code) {
                nextStates.set(15)
            }
            return type
        }

        fun NFA_SNBT_26(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == '.'.code) {
                nextStates.set(4)
            } else if ((ch == 'E'.code) || (ch == 'e'.code)) {
                nextStates.set(30)
            } else if (ch == 'F'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            } else if (ch == 'f'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            }
            return type
        }

        fun NFA_SNBT_27(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(27)
            } else if ((ch == 'E'.code) || (ch == 'e'.code)) {
                nextStates.set(7)
            } else if (ch == 'D'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            } else if (ch == 'd'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            }
            return type
        }

        fun NFA_SNBT_28(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == '0'.code) {
                nextStates.set(17)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(23)
            }
            return type
        }

        fun NFA_SNBT_29(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(29)
            } else if ((ch == 'E'.code) || (ch == 'e'.code)) {
                nextStates.set(30)
            } else if (ch == 'F'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            } else if (ch == 'f'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            }
            return type
        }

        fun NFA_SNBT_30(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if ((ch == '+'.code) || (ch == '-'.code)) {
                nextStates.set(2)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(39)
            }
            return type
        }

        fun NFA_SNBT_31(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == '0'.code) {
                nextStates.set(32)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(10)
            }
            return type
        }

        fun NFA_SNBT_32(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == '.'.code) {
                nextStates.set(8)
            } else if ((ch == 'E'.code) || (ch == 'e'.code)) {
                nextStates.set(7)
            } else if (ch == 'D'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            } else if (ch == 'd'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.DOUBLE)) type = SNBTConstants.TokenType.DOUBLE
            }
            return type
        }

        fun NFA_SNBT_33(
            ch: Int,
            nextStates: BitSet?,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == 'L'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.LONG)) type = SNBTConstants.TokenType.LONG
            } else if (ch == 'l'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.LONG)) type = SNBTConstants.TokenType.LONG
            }
            return type
        }

        fun NFA_SNBT_34(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == '.'.code) {
                nextStates.set(4)
            } else if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(34)
            } else if ((ch == 'E'.code) || (ch == 'e'.code)) {
                nextStates.set(30)
            } else if (ch == 'F'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            } else if (ch == 'f'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            }
            return type
        }

        fun NFA_SNBT_35(
            ch: Int,
            nextStates: BitSet?,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch == 'e'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.BOOLEAN)) type = SNBTConstants.TokenType.BOOLEAN
            }
            return type
        }

        fun NFA_SNBT_36(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == '\''.code) {
                nextStates.set(1)
            }
            return type
        }

        fun NFA_SNBT_37(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '0'.code && ch <= '9'.code) {
                nextStates.set(37)
            } else if (ch == 'B'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.BYTE)) type = SNBTConstants.TokenType.BYTE
            } else if (ch == 'b'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.BYTE)) type = SNBTConstants.TokenType.BYTE
            }
            return type
        }

        fun NFA_SNBT_38(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>?
        ): SNBTConstants.TokenType? {
            val type: SNBTConstants.TokenType? = null
            if (ch == '0'.code) {
                nextStates.set(26)
            } else if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(34)
            }
            return type
        }

        fun NFA_SNBT_39(
            ch: Int,
            nextStates: BitSet,
            validTypes: EnumSet<SNBTConstants.TokenType?>
        ): SNBTConstants.TokenType? {
            var type: SNBTConstants.TokenType? = null
            if (ch >= '1'.code && ch <= '9'.code) {
                nextStates.set(39)
            } else if (ch == 'F'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            } else if (ch == 'f'.code) {
                if (validTypes.contains(SNBTConstants.TokenType.FLOAT)) type = SNBTConstants.TokenType.FLOAT
            }
            return type
        }

        fun NFA_FUNCTIONS_init() {
            nfaFunctions = arrayOf(
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_0(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_1(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_2(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_3(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_4(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_5(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_6(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_7(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_8(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_9(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_10(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_11(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_12(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_13(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_14(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_15(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_16(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_17(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_18(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_19(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_20(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_21(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_22(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_23(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_24(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_25(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_26(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_27(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_28(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_29(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_30(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_31(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_32(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_33(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_34(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_35(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_36(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_37(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_38(
                        ch,
                        nextStates
                    )
                },
                NfaFunction { obj: Int, ch: BitSet?, nextStates: EnumSet<SNBTConstants.TokenType?>? ->
                    NFA_SNBT_39(
                        ch,
                        nextStates
                    )
                })
        }
    }
}


