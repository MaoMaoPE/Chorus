package org.chorus.utils.random


interface RandomSourceProvider {
    /**
     * Create a new RandomSource using the random long generated by [.nextLong]
     */
    fun fork(): RandomSourceProvider

    /**
     * Generate random integer between [Integer.MIN_VALUE] and [Integer.MIN_VALUE]
     */
    fun nextInt(): Int

    /**
     * Generate random integer between 0 and max
     */
    fun nextInt(max: Int): Int

    /**
     * Generate a random int in the range min-max,include min and max
     */
    fun nextInt(min: Int, max: Int): Int

    /**
     * Generate random long between [Long.MIN_VALUE] and [Long.MIN_VALUE]
     */
    fun nextLong(): Long

    /**
     * Generate random boolean
     */
    fun nextBoolean(): Boolean

    /**
     * Next float 0-1
     */
    fun nextFloat(): Float

    /**
     * Next double 0-1
     */
    fun nextDouble(): Double

    /**
     * Next double -1~1 for Gaussian distribution
     */
    fun nextGaussian(): Double

    companion object {
        @JvmStatic
        fun create(): RandomSourceProvider {
            return NukkitRandom()
        }

        fun create(seed: Long): RandomSourceProvider {
            return NukkitRandom(seed)
        }
    }
}
